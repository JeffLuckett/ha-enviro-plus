name: Tests

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
      - uses: actions/checkout@v5

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Verify Python version
        run: |
          echo "Python version:"
          python --version
          echo "Python path:"
          which python

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          echo "Upgrading pip..."
          python -m pip install --upgrade pip
          echo "Installing main dependencies..."
          pip install -r requirements-ci.txt
          echo "Installing dev dependencies..."
          pip install -r requirements-dev.txt
          echo "Verifying installations..."
          python -c "import pytest, black, flake8, mypy; print('All dev tools installed successfully')"
          echo "Testing imports with mocked hardware..."
          python -c "import sys; sys.path.insert(0, '.'); from tests.conftest import *; print('Hardware mocks loaded successfully')"

      - name: Lint with flake8
        run: |
          # Stop the build if there are Python syntax errors or undefined names
          echo "Running flake8 syntax check..."
          flake8 ha_enviro_plus tests --count --select=E9,F63,F7,F82 --show-source --statistics
          echo "Running flake8 style check..."
          # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 ha_enviro_plus tests --count --exit-zero --max-complexity=10 --max-line-length=100 --statistics

      - name: Check formatting with black
        run: |
          black --check ha_enviro_plus tests

      - name: Type check with mypy
        run: |
          mypy ha_enviro_plus --ignore-missing-imports

      - name: Run unit tests
        run: |
          pytest tests/unit -v --cov=ha_enviro_plus --cov-report=xml --cov-report=term-missing

      - name: Run integration tests
        run: |
          pytest tests/integration -v --cov=ha_enviro_plus --cov-report=xml --cov-report=term-missing

      - name: Run all tests (excluding hardware)
        run: |
          pytest tests/ -v --cov=ha_enviro_plus --cov-report=xml --cov-report=term-missing --cov-report=html -m "not hardware"

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ matrix.python-version }}
          path: htmlcov/
          retention-days: 30

  hardware-tests:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v5

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install dependencies
        run: |
          echo "Upgrading pip..."
          python -m pip install --upgrade pip
          echo "Installing main dependencies..."
          pip install -r requirements-ci.txt
          echo "Installing dev dependencies..."
          pip install -r requirements-dev.txt
          echo "Verifying installations..."
          python -c "import pytest, black, flake8, mypy; print('All dev tools installed successfully')"
          echo "Testing imports with mocked hardware..."
          python -c "import sys; sys.path.insert(0, '.'); from tests.conftest import *; print('Hardware mocks loaded successfully')"

      - name: Run hardware tests (if hardware available)
        run: |
          pytest tests/hardware -v --cov=ha_enviro_plus --cov-report=xml --cov-report=term-missing || echo "Hardware tests skipped - no hardware detected"

  build:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - uses: actions/checkout@v5

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: |
          python -m build

      - name: Check package
        run: |
          twine check dist/*

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  security:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v5

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install safety bandit

      - name: Run safety check
        run: |
          safety check

      - name: Run bandit security check
        run: |
          bandit -r ha_enviro_plus -f json -o bandit-report.json || true

      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: bandit-report.json
