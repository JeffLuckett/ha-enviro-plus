[changelog]
# changelog header
header = "Changelog"
# changelog body template
body = """
{% if version %}\
## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else %}\
## [unreleased]
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}
### {{ group | upper_first }}
{% for commit in commits %}
- {{ commit.message | upper_first }}\
{% endfor %}
{% endfor %}
"""

# template for a single commit
commit = "- {{ message | upper_first }}"

[git]
# parse commits that are conventional
conventional_commits = true
# filter out merge commits
filter_commits = true
# process the lines in the commit message
filter_unconventional = true
# split commits by newlines
split_commits = false
# regex for preprocessing the commit messages
commit_preprocessors = [
    { pattern = '\((\w+\s)?#([0-9]+)\)', replace = "([#$2](https://github.com/JeffLuckett/ha-enviro-plus/issues/$2))" },
    { pattern = "Fixes #([0-9]+)", replace = "Fixes [#$1](https://github.com/JeffLuckett/ha-enviro-plus/issues/$1)" },
    { pattern = "Closes #([0-9]+)", replace = "Closes [#$1](https://github.com/JeffLuckett/ha-enviro-plus/issues/$1)" },
    { pattern = "Refs #([0-9]+)", replace = "Refs [#$1](https://github.com/JeffLuckett/ha-enviro-plus/issues/$1)" },
]

# regex for parsing and grouping commits
commit_parsers = [
    { message = "^feat", group = "Features" },
    { message = "^feature", group = "Features" },
    { message = "^fix", group = "Bug Fixes" },
    { message = "^perf", group = "Performance" },
    { message = "^refactor", group = "Refactor" },
    { message = "^style", group = "Style" },
    { message = "^test", group = "Testing" },
    { message = "^tests", group = "Testing" },
    { message = "^build", group = "Build" },
    { message = "^ci", group = "CI" },
    { message = "^docs", group = "Documentation" },
    { message = "^chore", group = "Chore" },
]

# protect breaking changes
protect_breaking_commits = true
# filter out the commits that are not matched by commit parsers
filter_commits = true
# glob pattern for matching git tags
tag_pattern = "v[0-9]*"
# regex for skipping tags
skip_tags = "^v0.1.0-rc.*"
# regex for ignoring tags
ignore_tags = ""
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "newest"
